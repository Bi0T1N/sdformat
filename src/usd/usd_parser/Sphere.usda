#usda 1.0
(
    defaultPrim = "root"
)

def Xform "World"
{
  def SphereLight "SphereLight"
  {
      float intensity = 30000
      float radius = 150
      double3 xformOp:translate = (0, 0, 3)
      uniform token[] xformOpOrder = ["xformOp:translate"]
  }

  def PhysicsScene "physicsScene"
  {
    float3 gravity = (0, 0, -1000)
  }

  #Joint with 5 limits and one drive
  def PhysicsFixedJoint "Fixed_cylinder_sphere" (
      prepend apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ",
                            "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotZ"]
  )
  {
      rel physics:body0 = </World/sphere>
      rel physics:body1 = </World/cylinder>
      float limit:rotX:physics:high = -1
      float limit:rotX:physics:low = 1
      float limit:rotY:physics:high = -1
      float limit:rotY:physics:low = 1
      float limit:transX:physics:high = -1
      float limit:transX:physics:low = 1
      float limit:transY:physics:high = -1
      float limit:transY:physics:low = 1
      float limit:transZ:physics:high = -1
      float limit:transZ:physics:low = 1
      float drive:rotZ:physics:targetVelocity = 10.0
      float drive:rotZ:physics:damping = 9999.0
      point3f physics:localPos0 = (0, 60, 0)
      point3f physics:localPos1 = (0, -60, 0)
      quatf physics:localRot0 = (1, 0, 0, 0)
      quatf physics:localRot1 = (1, 0, 0, 0)
  }

  def PhysicsFixedJoint "Fixed_world_sphere" (
      prepend apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ",
                            "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotZ"]
  )
  {
      rel physics:body0 = </World/world>
      rel physics:body1 = </World/sphere>
      float limit:rotX:physics:high = -1
      float limit:rotX:physics:low = 1
      float limit:rotY:physics:high = -1
      float limit:rotY:physics:low = 1
      float limit:transX:physics:high = -1
      float limit:transX:physics:low = 1
      float limit:transY:physics:high = -1
      float limit:transY:physics:low = 1
      float limit:transZ:physics:high = -1
      float limit:transZ:physics:low = 1
      float drive:rotZ:physics:targetVelocity = 10.0
      float drive:rotZ:physics:damping = 9999.0
      point3f physics:localPos0 = (0, 60, 0)
      point3f physics:localPos1 = (0, -60, 0)
      quatf physics:localRot0 = (1, 0, 0, 0)
      quatf physics:localRot1 = (1, 0, 0, 0)
  }


  def Sphere "sphere" (
    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
  )
  {
    bool physics:collisionEnabled = 1

    float physics:mass = 2.2

    point3f physics:centerOfMass = (0.1, 0.2, 0)
    float3 physics:diagonalInertia = (0, 0, 0)
    quatf physics:principalAxes = (1, 0, 0, 0)

    double3 xformOp:translate = (1, 1, 0)
    uniform token[] xformOpOrder = ["xformOp:translate"]

    color3f[] primvars:displayColor = [(1, 0, 1)]
    double radius = 0.8
  }

  def Sphere "world"
  {
  }

  def Cylinder "cylinder" (
    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
  )
  {
    bool physics:collisionEnabled = 1

    float physics:mass = 2.2

    point3f physics:centerOfMass = (0.1, 0.2, 0)
    float3 physics:diagonalInertia = (0, 0, 0)
    quatf physics:principalAxes = (1, 0, 0, 0)

    double3 xformOp:translate = (1, -1, 0)
    uniform token[] xformOpOrder = ["xformOp:translate"]

    color3f[] primvars:displayColor = [(0, 1, 1)]
    double height = 0.3
    double radius = 0.8
  }
}
